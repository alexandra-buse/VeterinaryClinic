/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Cabinet_veterinar_app;
import static Cabinet_veterinar_app.DBconnect.connect;
import javax.swing.ImageIcon;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.Date;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alexa
 */
public class FormularCabinet extends javax.swing.JFrame {

    /**
     * Creates new form FormularCabinet
     */
    //initializarea componentelor
    public FormularCabinet() {
        initComponents();
        //getConnection();
        fillTable();
        fillCombo();
        fillCombo2();
    }
    
    //functie pentru inchiderea formularului atunci cand se deschide alt formular
     public void close(){
        WindowEvent winClosingEvent = new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }
    
     //realizarea conexiunii cu baza de date
     public Connection getConnection()
    {
        Connection con = null;
        
        try {
            con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Cabinet_veterinar;user=alexandra;password=12345");
            return con;
        } catch (SQLException ex) {
            Logger.getLogger(FormularCabinet.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
     
    String photopath="";
    //functie pentru resetarea dimensiunii imaginii pentru a se potrivi in casuta de spatiu alocata
    public ImageIcon resetImageSize(String photopath,byte[] photo){
        ImageIcon myPhoto=null;
        if (photopath!=null) {
            myPhoto=new ImageIcon(photopath);
        }else{
               myPhoto=new ImageIcon(photo);
        }
        Image img=myPhoto.getImage();
        Image img1=img.getScaledInstance(label_photo.getWidth(),label_photo.getHeight(),
                Image.SCALE_SMOOTH);
        ImageIcon ph=new ImageIcon(img1);
        return ph;        
    }
    
    //functie folosita pentru extragerea datelor ce vor completa tabelul din formular
    public ArrayList<AnimalContainer> retrieveData(){
        ArrayList<AnimalContainer> al=null;
                al=new ArrayList<AnimalContainer>();
       
        try {
            Connection conn=getConnection();
            String qry="select * from Animal";
            Statement st=conn.createStatement();
            ResultSet rs=st.executeQuery(qry);
            AnimalContainer Animal;
            while (rs.next()) {
                Animal =new AnimalContainer(rs.getInt("IdAnimal"),rs.getString("Nume"),
                        Float.parseFloat(rs.getString("Greutate")),rs.getString("DataNasterii"),
                        rs.getString("Microchip"), rs.getBytes("Poza"));                
                al.add(Animal);
              }
           
        } catch (Exception e) {
            System.out.println(e);
        }
       return al; 
    }
    
    //functie folosita pentru a umple tabelul cu datele extrase
    public void fillTable(){
        ArrayList<AnimalContainer> al=retrieveData();
        DefaultTableModel model=(DefaultTableModel)Table_animale.getModel();
        model.setRowCount(0); // Empty/clear the table
        Object[] row=new Object[5];
        for (int i = 0; i < al.size(); i++) {
            row[0]=al.get(i).getId();
            row[1]=al.get(i).getName();
            row[2]=al.get(i).getMicrochip();
            row[3]=al.get(i).getDateofbirth();
            row[4]=al.get(i).getGreutate();

            model.addRow(row);
        }
        //model.setRowCount(0);
    }
    
  
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField_name = new javax.swing.JTextField();
        jTextField_sex = new javax.swing.JTextField();
        jTextField_culoare = new javax.swing.JTextField();
        jTextField_microchip = new javax.swing.JTextField();
        jTextField_greutate = new javax.swing.JTextField();
        label_photo = new javax.swing.JLabel();
        jButton_new = new javax.swing.JButton();
        jButton_insert = new javax.swing.JButton();
        jButton_update = new javax.swing.JButton();
        jButton_delete = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextField_search = new javax.swing.JTextField();
        jButton_photo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_animale = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jTextField_id = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jComboBox_tip = new javax.swing.JComboBox();
        jComboBox_rasa = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jComboBox_propietar = new javax.swing.JComboBox();
        jButton_formStapani = new javax.swing.JButton();
        jButton_meniu = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Informatii Animale");
        jLabel1.setAlignmentX(10.0F);
        jLabel1.setPreferredSize(new java.awt.Dimension(105, 40));
        jPanel1.add(jLabel1);
        jLabel1.setBounds(436, 45, 662, 61);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nume");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(203, 292, 86, 26);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Rasa");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(203, 364, 86, 26);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tip Animal");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(203, 331, 86, 26);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Culoare");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(200, 440, 86, 26);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Data nasterii");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(200, 480, 86, 26);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Microchip");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(200, 520, 86, 26);

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Stapan");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(200, 590, 86, 26);

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Greutate");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(200, 560, 86, 26);
        jPanel1.add(jTextField_name);
        jTextField_name.setBounds(319, 294, 267, 22);
        jPanel1.add(jTextField_sex);
        jTextField_sex.setBounds(320, 400, 93, 22);
        jPanel1.add(jTextField_culoare);
        jTextField_culoare.setBounds(320, 440, 93, 22);
        jPanel1.add(jTextField_microchip);
        jTextField_microchip.setBounds(320, 520, 93, 22);
        jPanel1.add(jTextField_greutate);
        jTextField_greutate.setBounds(320, 560, 93, 22);

        label_photo.setBackground(new java.awt.Color(255, 255, 255));
        label_photo.setOpaque(true);
        jPanel1.add(label_photo);
        label_photo.setBounds(684, 362, 192, 137);

        jButton_new.setBackground(new java.awt.Color(255, 255, 255));
        jButton_new.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user_add.png"))); // NOI18N
        jButton_new.setText("New");
        jButton_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_newActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_new);
        jButton_new.setBounds(1120, 180, 230, 60);

        jButton_insert.setBackground(new java.awt.Color(255, 255, 255));
        jButton_insert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/check.png"))); // NOI18N
        jButton_insert.setText("Insert");
        jButton_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_insertActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_insert);
        jButton_insert.setBounds(1120, 338, 230, 60);

        jButton_update.setBackground(new java.awt.Color(255, 255, 255));
        jButton_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sync.png"))); // NOI18N
        jButton_update.setText("Update");
        jButton_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_updateActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_update);
        jButton_update.setBounds(1120, 422, 230, 60);

        jButton_delete.setBackground(new java.awt.Color(255, 255, 255));
        jButton_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/erase.png"))); // NOI18N
        jButton_delete.setText("Delete");
        jButton_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_deleteActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_delete);
        jButton_delete.setBounds(1120, 260, 230, 60);

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Search by name");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(200, 780, 93, 16);

        jTextField_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_searchKeyReleased(evt);
            }
        });
        jPanel1.add(jTextField_search);
        jTextField_search.setBounds(310, 770, 160, 30);

        jButton_photo.setBackground(new java.awt.Color(255, 255, 255));
        jButton_photo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/photo1.png"))); // NOI18N
        jButton_photo.setText("Select photo");
        jButton_photo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_photoActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_photo);
        jButton_photo.setBounds(684, 292, 192, 57);

        Table_animale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nume", "Microchip", "Data Nasterii", "Greutate"
            }
        ));
        Table_animale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_animaleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table_animale);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(744, 770, 750, 103);

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Id");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(203, 259, 86, 26);
        jPanel1.add(jTextField_id);
        jTextField_id.setBounds(319, 261, 78, 22);
        jPanel1.add(jDateChooser1);
        jDateChooser1.setBounds(320, 480, 170, 22);

        jComboBox_tip.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox_tipPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(jComboBox_tip);
        jComboBox_tip.setBounds(319, 333, 120, 22);
        jPanel1.add(jComboBox_rasa);
        jComboBox_rasa.setBounds(319, 366, 140, 22);

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Sex");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(200, 410, 21, 16);

        jPanel1.add(jComboBox_propietar);
        jComboBox_propietar.setBounds(320, 590, 152, 22);

        jButton_formStapani.setBackground(new java.awt.Color(255, 255, 255));
        jButton_formStapani.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/depositphotos_125169086-stock-illustration-man-with-beard-icon-cartoon1.jpg"))); // NOI18N
        jButton_formStapani.setText("Editeaza Stapani");
        jButton_formStapani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_formStapaniActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_formStapani);
        jButton_formStapani.setBounds(1120, 600, 230, 59);

        jButton_meniu.setBackground(new java.awt.Color(255, 255, 255));
        jButton_meniu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder_red.png"))); // NOI18N
        jButton_meniu.setText("Meniu");
        jButton_meniu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_meniuActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_meniu);
        jButton_meniu.setBounds(1120, 503, 230, 60);

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\alexa\\OneDrive\\Documents\\NetBeansProjects\\test\\src\\images\\catimage.png")); // NOI18N
        jLabel5.setText("jLabel5");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(-20, 0, 200, 170);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1517, 929));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
     
    
    //Buton adaugare poze
    private void jButton_photoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_photoActionPerformed
        JFileChooser chooser=new JFileChooser();
        chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter fnef=new FileNameExtensionFilter("*.images", "jpg","png");
        chooser.addChoosableFileFilter(fnef);
        int ans=chooser.showSaveDialog(null);
        if (ans==JFileChooser.APPROVE_OPTION) {
            File selectedPhoto=chooser.getSelectedFile();
            String path=selectedPhoto.getAbsolutePath();
            label_photo.setIcon(resetImageSize(path, null));
            this.photopath=path;
        }
    }//GEN-LAST:event_jButton_photoActionPerformed

    
    //buton insert
    private void jButton_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_insertActionPerformed

             if ((jTextField_name!=null)&& photopath!=null) {
            try {
                Connection conn=getConnection();
                //se pregateste query-ul
                PreparedStatement ps=conn.prepareStatement("insert into Animal"
                        + "(Nume,Sex,Culoare,DataNasterii,Greutate,Microchip,IdRasa,Poza,IdStapan) values (?,?,?,?,?,?,?,?,?)");
                //se extrag din field-uri datele necesare ce se vor introduce in baza de date
                ps.setString(1,jTextField_name.getText());
                ps.setString(2,jTextField_sex.getText());
                ps.setString(3,jTextField_culoare.getText());
                SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd"); //se seteaza formatul datei pentru BD
                String dob1=sdf.format(jDateChooser1.getDate());
                ps.setString(4,dob1);
                ps.setFloat(5, Float.parseFloat(jTextField_greutate.getText()));
                ps.setString(6,jTextField_microchip.getText());   
                String sql = "select * from Rasa where Denumire = ?";
                String temp = (String)jComboBox_rasa.getSelectedItem();      
                PreparedStatement ps2 = conn.prepareStatement(sql);
                ps2.setString(1, temp);
                ResultSet rs2 = ps2.executeQuery();
                
                    if(rs2.next()){
                        String temp1 = rs2.getString("IdRasa");
                        ps.setInt(7, Integer.parseInt(temp1));
                    }
                    
                InputStream is=new FileInputStream(new File(photopath)); //se extrage calea pozei introdusa in formular
                ps.setBlob(8, is);
                
                 String sql2 = "select * from Propietar where Nume=? AND Prenume=?";
                        String temp2 = (String)jComboBox_propietar.getSelectedItem();
                        
                        PreparedStatement ps3 = conn.prepareStatement(sql2);
                        String[] splited = temp2.split(" ");
                        ps3.setString(1, splited[0]);
                        ps3.setString(2, splited[1]);
                        ResultSet rs3 = ps3.executeQuery();
                        if(rs3.next()){
                        String temp3 = rs3.getString("IdPropietar");
                        ps.setInt(9, Integer.parseInt(temp3));
                    }
                        
                int res=ps.executeUpdate();
                 fillTable();
                if (res>=1) {
                    JOptionPane.showMessageDialog(null, res+" Animal"
                            + " inserat in baza de date .....");
                }else
                    JOptionPane.showMessageDialog(null, "Inserare esuata ....");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }                     
        }else{
             JOptionPane.showMessageDialog(null, "Numele si poza sunt obligatorii ....");
        }
        
    }//GEN-LAST:event_jButton_insertActionPerformed

    //functie pentru butonul de update
    private void jButton_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_updateActionPerformed
       if ( jTextField_name!=null) {
              String qry=null;
              PreparedStatement ps=null;
              Connection conn=getConnection();
              //se trateaza diferit cazul in care updatam si o poza de cazul in care nu updatam o poza
              if (photopath=="") {
                    try {        
                        qry="update Animal set Nume=?, Sex=?, Culoare=?, DataNasterii=?, Greutate=?,Microchip=?, IdRasa = ?, IdStapan=? where IdAnimal=?";
                        ps=conn.prepareStatement(qry);
                        
                        ps.setString(1,jTextField_name.getText());
                        ps.setString(2,jTextField_sex.getText());
                        ps.setString(3,jTextField_culoare.getText());
                        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
                        String dob1=sdf.format(jDateChooser1.getDate());
                        ps.setString(4,dob1);
                        ps.setFloat(5, Float.parseFloat(jTextField_greutate.getText()));
                        ps.setString(6,jTextField_microchip.getText());
                        String sql = "select * from Rasa where Denumire = ?";
                        String temp = (String)jComboBox_rasa.getSelectedItem();
                        
                        PreparedStatement ps2 = conn.prepareStatement(sql);
                        ps2.setString(1, temp);
                        ResultSet rs2 = ps2.executeQuery();
                
                    if(rs2.next()){
                        String temp1 = rs2.getString("IdRasa");
                        ps.setInt(7, Integer.parseInt(temp1));
                    }
                    
                    String sql2 = "select * from Propietar where Nume=? AND Prenume=?";
                        String temp2 = (String)jComboBox_propietar.getSelectedItem();
                        
                        PreparedStatement ps3 = conn.prepareStatement(sql2);
                        String[] splited = temp2.split(" ");
                        ps3.setString(1, splited[0]);
                        ps3.setString(2, splited[1]);
                        ResultSet rs3 = ps3.executeQuery();
                        if(rs3.next()){
                        String temp3 = rs3.getString("IdPropietar");
                        ps.setInt(8, Integer.parseInt(temp3));
                    }
                        ps.setInt(9, Integer.parseInt(jTextField_id.getText()));
                        int res=ps.executeUpdate();
                         fillTable();
                        if (res>=1) {
                            JOptionPane.showMessageDialog(null, res+" Animal"
                                    + " actualizat in baza de date .....");
                        }else
                            JOptionPane.showMessageDialog(null, "Actualizare esuata ....");
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }           

                    }else{
                        try {    
                            InputStream is=new FileInputStream(new File(photopath));
                            
                        qry="update Animal set Nume=?, Sex=?, Culoare=?, DataNasterii=?, Greutate=?,Microchip=?, Poza=?, IdRasa=?, IdStapan=? where IdAnimal=?";
                        ps=conn.prepareStatement(qry);
                        ps.setString(1,jTextField_name.getText());
                        ps.setString(2,jTextField_sex.getText());
                        ps.setString(3,jTextField_culoare.getText());
                        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
                        String dob1=sdf.format(jDateChooser1.getDate());
                        ps.setString(4,dob1);
                        ps.setFloat(5, Float.parseFloat(jTextField_greutate.getText()));
                        ps.setString(6,jTextField_microchip.getText());                       
                        ps.setBlob(7, is);
                         String sql = "select * from Rasa where Denumire = ?";
                        String temp = (String)jComboBox_rasa.getSelectedItem();
                        
                        PreparedStatement ps2 = conn.prepareStatement(sql);
                        ps2.setString(1, temp);
                        ResultSet rs2 = ps2.executeQuery();
                
                    if(rs2.next()){
                        String temp1 = rs2.getString("IdRasa");
                        ps.setInt(8, Integer.parseInt(temp1));
                    }
                        String sql2 = "select * from Propietar where Nume=? AND Prenume=?";
                        String temp2 = (String)jComboBox_propietar.getSelectedItem();
                        
                        PreparedStatement ps3 = conn.prepareStatement(sql2);
                        String[] splited = temp2.split(" ");
                        ps3.setString(1, splited[0]);
                        ps3.setString(2, splited[1]);
                        ResultSet rs3 = ps3.executeQuery();
                        if(rs3.next()){
                        String temp3 = rs3.getString("IdPropietar");
                        ps.setInt(9, Integer.parseInt(temp3));
                    }
                        ps.setInt(10, Integer.parseInt(jTextField_id.getText()));
                                                
                        int res=ps.executeUpdate();
                         fillTable();
                        if (res>=1) {
                            JOptionPane.showMessageDialog(null, res+" Animal"
                                    + " actualizat in baza de date .....");
                        }else
                            JOptionPane.showMessageDialog(null, "Actualizare esuata ....");
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }           
     
                    }
          }else
              JOptionPane.showMessageDialog(null, "Numele este obligatoriu.......");
            
                                               
    }//GEN-LAST:event_jButton_updateActionPerformed

    //functie pentru butonul de delete
    private void jButton_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_deleteActionPerformed
        if (jTextField_name.getText().equals("")) {
               JOptionPane.showMessageDialog(null, "Introduceti Numele");
        }else{             
                try{
                //se pregatesc instructiunile pentru a sterge datele despre animal atat din tabela "Animal" cat si din celelalte 
                    //tabele in care este folosit id-ul animalului
                String qry="delete from Animal where Nume=?";
                String qry2 = "delete from Vizita where IdPacient IN (select IdAnimal from Animal where Nume=?)";  
                String qry3 = "delete from VizitaProcedura where IdVizita IN (select IdVizita from Vizita where IdPacient IN (select IdAnimal from Animal where Nume=?))";
                Connection conn=getConnection();
                PreparedStatement ps3=conn.prepareStatement(qry3);
                ps3.setString(1,jTextField_name.getText());
                PreparedStatement ps2=conn.prepareStatement(qry2);
                int res3=ps3.executeUpdate();
                ps2.setString(1,jTextField_name.getText());
                int res2=ps2.executeUpdate();
                
                PreparedStatement ps=conn.prepareStatement(qry);
                ps.setString(1,jTextField_name.getText());
                int res=ps.executeUpdate();
                 fillTable();
                if (res>=1) {
                    JOptionPane.showMessageDialog(null, "Animal sters cu succes ....");    
                }else
                    JOptionPane.showMessageDialog(null, "Stergere anulata ....");    
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_jButton_deleteActionPerformed

    //aceasta functie este folosita pentru a completa campurile din formular cu informatiile randului pe care se da click in tabel
    
    private void Table_animaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_animaleMouseClicked
        try{
          int row = Table_animale.getSelectedRow();
          String Table_click = (Table_animale.getModel().getValueAt(row, 0).toString()); //se extrage id-ul animalului (prima variabila de pe fiecare rand din tabel)
          String sql = "select * from Animal where IdAnimal ='" + Table_click + "'";
          Connection conn=getConnection();
          PreparedStatement ps = conn.prepareStatement(sql);
          ResultSet rs = ps.executeQuery();
          if(rs.next()){
              String add1 = rs.getString("IdAnimal");
              jTextField_id.setText(add1);
              String add2 = rs.getString("Nume");
                jTextField_name.setText(add2);
                String add3 = rs.getString("IdRasa");
                String sql2 = "select * from Rasa where IdRasa = ?";
                PreparedStatement ps2 = conn.prepareStatement(sql2);
                ps2.setString(1, add3);
                ResultSet rs2 = ps2.executeQuery();
                
                    if(rs2.next()){
                        jComboBox_rasa.removeAllItems();
                        String temp1 = rs2.getString("IdTip");
                        String addt = rs2.getString("Denumire");
                        String sql3 = "select * from TipAnimal where IdTip = ?";
                        PreparedStatement ps3 = conn.prepareStatement(sql3);
                        ps3.setString(1, temp1);
                        ResultSet rs3 = ps3.executeQuery();
                        
                            if(rs3.next()){
                                String temp2 = rs3.getString("Denumire");
                                jComboBox_tip.setSelectedItem(temp2);
                            }
                            
                         jComboBox_rasa.addItem(addt);
                    }
                String add4 = rs.getString("Sex");
                jTextField_sex.setText(add4);
                String add5 = rs.getString("Culoare");
                jTextField_culoare.setText(add5);
                String add6 = rs.getString("Microchip");
                jTextField_microchip.setText(add6);
                String add7 = rs.getString("Greutate");
                jTextField_greutate.setText(add7);
                String add8 = rs.getString("DataNasterii");
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                Date date = formatter.parse(add8);
                jDateChooser1.setDate(date);
                String add9 = rs.getString("IdStapan");
                String sql4 = "select * from Propietar where IdPropietar = ?";
                PreparedStatement ps4 = conn.prepareStatement(sql4);
                        ps4.setString(1, add9);
                        ResultSet rs4 = ps4.executeQuery();
                        
                            if(rs4.next()){
                                String tempp1 = rs4.getString("Nume");
                                String tempp2 = rs4.getString("Prenume");
                                jComboBox_propietar.setSelectedItem(tempp1 + " " + tempp2);
                            }
                label_photo.setIcon(resetImageSize(null, retrieveData().get(row).getPhoto()));
          }  
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            System.out.println("Exe5");
        }
    }//GEN-LAST:event_Table_animaleMouseClicked

    int idTip;
    
    //functie folosita pentru a completa combobox-ul "rasa" doar dupa ce a fost selectat un element in combobox-ul "tip"
    private void jComboBox_tipPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox_tipPopupMenuWillBecomeInvisible
        String tmp = (String)jComboBox_tip.getSelectedItem();
        jComboBox_rasa.removeAllItems(); //se sterg toate elementele care se aflau inainte in combobox-ul rasa
        String sql = "select * from TipAnimal where Denumire=?"; //se pregateste query-ul pentru extragerea id-ului tipului de animal selectat in combobox
        try{
          Connection conn=getConnection();
          PreparedStatement ps = conn.prepareStatement(sql);
          ps.setString(1, tmp);
          ResultSet rs = ps.executeQuery(); 
          if(rs.next()){
              String add1 = rs.getString("IdTip");
              idTip = Integer.parseInt(add1);
             // System.out.println(idTip);
             
          }
          
          String sql2 = "select Denumire from Rasa where idTip = ' " + idTip + "'"; //se pregateste query-ul pentru extragerea raselor cu care va fi completat combobox-ul pentru rasa
          Connection conn2=getConnection();
          PreparedStatement ps2 = conn2.prepareStatement(sql2);
          ResultSet rs2 = ps2.executeQuery();
          
          while(rs2.next()){ //cat timp avem rezultate...
              String name = rs2.getString("Denumire"); // ... le extragem ...
              jComboBox_rasa.addItem(name); // ... si le adaugam in combobox-ul pentru rasa
          }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            System.out.println("Exe4");
        }
    }//GEN-LAST:event_jComboBox_tipPopupMenuWillBecomeInvisible

    //butonul new
    //goleste toate campurile de text pentru a putea fi completate cu text nou
    private void jButton_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_newActionPerformed
        jTextField_id.setText("");
        jTextField_name.setText("");
        jTextField_sex.setText("");
        jTextField_culoare.setText("");
        jTextField_microchip.setText("");
        jTextField_greutate.setText("");
        
    }//GEN-LAST:event_jButton_newActionPerformed

    //cod pentru completarea field-urilor cu datele corespunzatoare
    //in functie de numele cautat
    private void jTextField_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_searchKeyReleased
        try{
            String sql = "select * from Animal where Nume = ?";
            Connection conn=getConnection();
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, jTextField_search.getText());
            ResultSet rs = ps.executeQuery();
            
            if(rs.next()){
                String add1 = rs.getString("IdAnimal");
                jTextField_id.setText(add1);
                String add2 = rs.getString("Nume");
                jTextField_name.setText(add2);
                String add3 = rs.getString("IdRasa");
                String sql2 = "select * from Rasa where IdRasa = ?";
                PreparedStatement ps2 = conn.prepareStatement(sql2);
                ps2.setString(1, add3);
                ResultSet rs2 = ps2.executeQuery();
                
                    if(rs2.next()){
                        jComboBox_rasa.removeAllItems();
                        String temp1 = rs2.getString("IdTip");
                        String addt = rs2.getString("Denumire");
                        String sql3 = "select * from TipAnimal where IdTip = ?";
                        PreparedStatement ps3 = conn.prepareStatement(sql3);
                        ps3.setString(1, temp1);
                        ResultSet rs3 = ps3.executeQuery();
                        
                            if(rs3.next()){
                                String temp2 = rs3.getString("Denumire");
                                jComboBox_tip.setSelectedItem(temp2);
                            }
                            
                         jComboBox_rasa.addItem(addt);
                    }
                String add4 = rs.getString("Sex");
                jTextField_sex.setText(add4);
                String add5 = rs.getString("Culoare");
                jTextField_culoare.setText(add5);
                String add6 = rs.getString("Microchip");
                jTextField_microchip.setText(add6);
                String add7 = rs.getString("Greutate");
                jTextField_greutate.setText(add7);
                String add8 = rs.getString("DataNasterii");
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                Date date = formatter.parse(add8);
                jDateChooser1.setDate(date);
                System.out.println(date);
                String add9 = rs.getString("IdStapan");
                String sql4 = "select * from Propietar where IdPropietar = ?";
                PreparedStatement ps4 = conn.prepareStatement(sql4);
                        ps4.setString(1, add9);
                        ResultSet rs4 = ps4.executeQuery();
                        
                            if(rs4.next()){
                                String tempp1 = rs4.getString("Nume");
                                String tempp2 = rs4.getString("Prenume");
                                jComboBox_propietar.setSelectedItem(tempp1 + " " + tempp2);
                            }
                int idsearched = Integer.parseInt(add1);
                int rowsearched = 0;
                ArrayList<AnimalContainer> al=retrieveData();
                int row;
                for (int i = 0; i < al.size(); i++) {
                    row=al.get(i).getId();
                    if(row == idsearched){
                        rowsearched = i;
                        break;
                    }
                } 
               label_photo.setIcon(resetImageSize(null, retrieveData().get(rowsearched).getPhoto()));   
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
           // System.out.println("Exe");
        } 
    }//GEN-LAST:event_jTextField_searchKeyReleased

    //functie pentru a deschide formularul pentru propietari
    private void jButton_formStapaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_formStapaniActionPerformed
        close();
        ClientForm f = new ClientForm();
        f.setVisible(true);
    }//GEN-LAST:event_jButton_formStapaniActionPerformed

    //functie pentru deschiderea meniului
    private void jButton_meniuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_meniuActionPerformed
        close();
        Meniu m = new Meniu();
        m.setVisible(true);
    }//GEN-LAST:event_jButton_meniuActionPerformed

    //functie folosita pentru a umple combobox-ul pentru tipul animalelor cu datele din BD
    private void fillCombo(){
        try{
          String sql = "select Denumire from TipAnimal ";
          Connection conn=getConnection();
          PreparedStatement ps = conn.prepareStatement(sql);
          ResultSet rs = ps.executeQuery();
          
          while(rs.next()){
              String name = rs.getString("Denumire");
              jComboBox_tip.addItem(name);
          }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            System.out.println("Exe1");
        }
    }
    
     //functie folosita pentru a umple combobox-ul pentru propietari cu datele din BD
    private void fillCombo2(){
        try{
          String sql = "select * from Propietar ";
          Connection conn=getConnection();
          PreparedStatement ps = conn.prepareStatement(sql);
          ResultSet rs = ps.executeQuery();
          
          while(rs.next()){
              String name = rs.getString("Nume");
              String surname = rs.getString("Prenume");
              jComboBox_propietar.addItem(name + " " + surname);
          }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            System.out.println("Exe1");
        }
    }
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularCabinet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularCabinet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularCabinet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularCabinet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularCabinet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table_animale;
    private javax.swing.JButton jButton_delete;
    private javax.swing.JButton jButton_formStapani;
    private javax.swing.JButton jButton_insert;
    private javax.swing.JButton jButton_meniu;
    private javax.swing.JButton jButton_new;
    private javax.swing.JButton jButton_photo;
    private javax.swing.JButton jButton_update;
    private javax.swing.JComboBox jComboBox_propietar;
    private javax.swing.JComboBox jComboBox_rasa;
    private javax.swing.JComboBox jComboBox_tip;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField_culoare;
    private javax.swing.JTextField jTextField_greutate;
    private javax.swing.JTextField jTextField_id;
    private javax.swing.JTextField jTextField_microchip;
    private javax.swing.JTextField jTextField_name;
    private javax.swing.JTextField jTextField_search;
    private javax.swing.JTextField jTextField_sex;
    private javax.swing.JLabel label_photo;
    // End of variables declaration//GEN-END:variables
}
